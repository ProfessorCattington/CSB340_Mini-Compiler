package Lexer;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class LexerJunitTests {

    //make some gettings on the lexer class and write a class is constructed properly test.

    @Test
    @DisplayName("Verify the lexer produces an output file")
    void testLexerMakesExpectedOutput() throws FileNotFoundException {

        String outputFilePath = "src\\main\\resources\\lexer_output\\prime.lex";
        String inputFilePath = "src\\main\\resources\\prime.c";

        File f = new File(inputFilePath);
        Scanner s = new Scanner(f);
        String source = " ";
        String result = " ";
        while (s.hasNext()) {
            source += s.nextLine() + "\n";
        }
        Lexer l = new Lexer(source);
        Lexer.outputToFile(result, fileName);

    }

    @Test
    @DisplayName("Test Lexer's file output matches the verification file'")
    void testLexerOutputAgainstVerificationFile() throws FileNotFoundException {

        String verificationFilePath = "main\\resources\\verification_files\\prime.lex";
        String outputFilePath = "main\\resources\\lexer_output\\prime.lex";
        String inputFilePath = "main\\resources\\prime.c";

        File f = new File(inputFilePath);
        Scanner s = new Scanner(f);
        String source = " ";
        String result = " ";
        while (s.hasNext()) {
            source += s.nextLine() + "\n";
        }
        Lexer l = new Lexer(source);
        Lexer.outputToFile(result, fileName);

        //get the file generated by the lexer class
        f = new File(outputFilePath);
        Scanner s = new Scanner(f);
        String generatedOutput = " ";
        while (s.hasNext()) {
            generatedOutput += s.nextLine() + "\n";
        }

        //get the file provided by Eric on canvas
        f = new File(verificationFilePath);
        Scanner s = new Scanner(f);
        String verificationOutput = " ";
        while (s.hasNext()) {
            verificationOutput += s.nextLine() + "\n";
        }

        //verify the contents are the same
        Assertions.assertEquals(generatedOutput.length(), verificationOutput.length());

        for (int i = 0; i < generatedOutput.length(); i++) {
            Assertions.assertEquals(generatedOutput.charAt(i), verificationOutput.charAt(i));
        }

        Assertions.assertEquals(1, 1);
    }

}
